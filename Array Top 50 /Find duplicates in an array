

class Solution {
    public static ArrayList<Integer> duplicates(int arr[], int n) {
        // code here
        int freq[] = new int[n];
        for(int i =0; i<n; i++)
        freq[arr[i]]++;
        ArrayList<Integer> ans = new ArrayList<>();
        
        for(int i=0; i<n; i++)
        
        if(freq[i] > 1) ans.add(i);
        
        if(ans.size() == 0)
        ans.add(-1);
        
        return ans;
            
        
    }
}


class Solution {
    public static ArrayList<Integer> duplicates(int arr[], int n) {
        // code here
      HashSet<Integer> hs=new HashSet<>();
      Arrays.sort(arr);
      for(int i=0;i<n-1;i++)
       {
           if(arr[i]==arr[i+1])
           {
               hs.add(arr[i+1]);
           }
       }
           ArrayList<Integer> a = new ArrayList<>(hs); 
           Collections.sort(a);
       if(a.isEmpty())
       {
           a.add(-1);
       }
       return a;   
    }
}


class Solution {
    public static ArrayList<Integer> duplicates(int arr[], int n) {
        // code here
        for(int i = 0; i<n; i++){
            int val = arr[i] % n;
            arr[val] += n;
        }
        ArrayList<Integer> ans = new ArrayList<Integer>();
        for(int i =0; i<n; i++){
            arr[i] /= n;
            if(arr[i] > 1){
                ans.add(i);
            }
        }
            if(ans.size() == 0) ans.add(-1);
            return ans;
    }
}
