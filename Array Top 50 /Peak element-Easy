######## BRUTE ##########

class Solution
{
    public:
    int peakElement(int arr[], int n)
    {
       int i;
       for(i=0;i<n;i++){
           if(i == 0 && arr[i] >= arr[i+1])
                return 0;
            else if(i == n-1 && arr[i] >= arr[i-1])
                return n-1;
            else if(i != 0 && arr[i] >= arr[i-1] && arr[i] >= arr[i+1])
                return i;
       }
    }
};


########### OPTIMAL BINARY SEARCH #############


class Solution
{
   
    public int peakElement(int[] arr, int n)     // Function to find a peak element in an array
    {
        int low = 0, high = n - 1;
        
        
        while (low <= high) {                  // Binary search loop to find the peak element
            int mid = (low + high) / 2;  // Calculate the middle index
            
           
            if ((mid == 0 || arr[mid] >= arr[mid - 1]) &&        // Check if the middle element is a peak element
                (mid == n - 1 || arr[mid] >= arr[mid + 1]))
                return mid;                                      // Return the index of the peak element
                
            // If the element to the left of the middle is greater, search in the left half
            else if (mid > 0 && arr[mid - 1] > arr[mid])
                high = mid - 1;
            // If the element to the right of the middle is greater, search in the right half
            else
                low = mid + 1;
        }
        
        // If no peak element is found, return -1
        return -1;
    }
}
